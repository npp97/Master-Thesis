function [ P ] = error_estim_hermite( P )
    %ERROR Summary of this function goes here
    %   Detailed explanation goes here
    
    disp(['------- Error Estimates -------'])
    
    Ftrue = zeros(P.NX,1);
    Fgradtrue = zeros(P.NX,P.pdim);
    dx = zeros(P.pdim,P.NX,P.N);
    if(P.kernel_aniso > 1)
        RR = sqrt(sqdistance((bsxfun(@minus,P.XX,P.Xmean)/P.M)',P.Tp'));
        for j = 1 : P.pdim
            Xm = (bsxfun(@minus,P.XX,P.Xmean)/P.M);
            dx(j,:,:) = diffm(Xm(:,j),P.Tp(:,j));
        end
    else
        RR = sqrt(sqdistance(P.XX',P.Xp'));
        for j = 1 : P.pdim
            dx(j,:,:) = diffm(P.XX(:,j),P.Xp(:,j));
        end
    end
    
    disp(['# Computing Gradients on MCMC Samples'])
    textprogressbar('Progress: ');
    for j = 1 : P.NX
        textprogressbar(j/P.NX*100)
        [Ftrue(j),Fgradtrue(j,:)] = eval_gradllh(P.XX(j,:),P);
    end
    textprogressbar('done');
    
    disp(['# Interpolating on MCMC Samples'])
    if(P.kernel_aniso > 1)
        Finterp = rbf_hermite_eval(RR,P.eps,dx)*P.c_herm;
    else
        Finterp = rbf_hermite_eval(RR,P.eps,dx)*P.c_herm;
    end
    
    P.inferror = max(abs(Ftrue-Finterp)/P.fmax);
    P.l1error = 1/P.NX*sum(abs(1-Ftrue./Finterp));

    A = rbf(P.R,P.eps);
    invA = pinv(A);
    EF = (invA*P.F)./diag(invA);

    figure(13)
    clf
    
    subplot(2,4,1)
    plot(log(Ftrue),log(abs(Ftrue-Finterp)/P.fmax),'r*')
    hold on
    error_ellipse(cov([log(Ftrue),log(abs(Ftrue-Finterp)/P.fmax)]),mean([log(Ftrue),log(abs(Ftrue-Finterp)/P.fmax)]))
    xlabel('log function value')
    ylabel('log rel MCMC error')
    
    subplot(2,4,5)
    plot(log(P.F),log(abs(EF)/P.fmax),'r*')
    hold on
    error_ellipse(cov([log(Ftrue),log(abs(Ftrue-Finterp)/P.fmax)]),mean([log(Ftrue),log(abs(Ftrue-Finterp)/P.fmax)]))
    xlabel('log function value')
    ylabel('log rel particle error')
    
%     subplot(2,4,2)
%     plot(log(sqrt(sum(Fgradtrue.^2,2))),log(abs(Ftrue-Finterp)/P.fmax),'r*')
%     hold on
%     error_ellipse(cov([log(sqrt(sum(Fgradtrue.^2,2))),log(abs(Ftrue-Finterp)/P.fmax)]),mean([log(sqrt(sum(Fgradtrue.^2,2))),log(abs(Ftrue-Finterp)/P.fmax)]))
%     xlabel('log norm of gradient')
%     ylabel('log rel MCMC error')
%     
%     subplot(2,4,6)
%     plot(log(sqrt(sum(P.DF.^2,2))),log(abs(EF)/P.fmax),'r*')
%     hold on
%     error_ellipse(cov([log(sqrt(sum(Fgradtrue.^2,2))),log(abs(Ftrue-Finterp)/P.fmax)]),mean([log(sqrt(sum(Fgradtrue.^2,2))),log(abs(Ftrue-Finterp)/P.fmax)]))
%     xlabel('log norm of gradient')
%     ylabel('log rel particle error')
   
    subplot(2,4,3)
    plot(log(min(RR,[],2)),log(abs(Ftrue-Finterp)/P.fmax),'r*')
    hold on
    error_ellipse(cov([log(min(RR,[],2)),log(abs(Ftrue-Finterp)/P.fmax)]),mean([log(min(RR,[],2)),log(abs(Ftrue-Finterp)/P.fmax)]))
    xlabel('log min distance to grid')
    ylabel('log rel MCMC error')
    
    subplot(2,4,7)
    plot(log(min(P.R+max(max(P.R))*eye(P.N),[],2)),log(abs(EF)/P.fmax),'r*')
    hold on
    error_ellipse(cov([log(min(P.R+max(max(P.R))*eye(P.N),[],2)),log(abs(EF)/P.fmax)]),mean([log(min(P.R+max(max(P.R))*eye(P.N),[],2)),log(abs(EF)/P.fmax)]))
    xlabel('log min distance to grid')
    ylabel('log rel particle error') 
    

    
    try
        P.Nlist;
    catch
        P.Nlist = (P.R<min(repmat(P.rcp,1,P.N),repmat(P.rcp',P.N,1)))-logical(eye(P.N));
    end

    subplot(2,4,4)
    semilogy(sum(RR<P.D0*P.adap_rstar,2),log(abs(Ftrue-Finterp)/P.fmax),'r*')
    hold on
    error_ellipse(cov([sum(RR<P.D0*P.adap_rstar,2),log(abs(Ftrue-Finterp)/P.fmax)]),mean([sum(RR<P.D0*P.adap_rstar,2),log(abs(Ftrue-Finterp)/P.fmax)]))
    xlabel('Neighborhood size')
    ylabel('MCMC error')  
    
    subplot(2,4,8)
    semilogy(sum(P.Nlist,2),log(abs(EF)/P.fmax),'r*')
    hold on
    error_ellipse(cov([sum(P.Nlist,2),log(abs(EF)/P.fmax)]),mean([sum(P.Nlist,2),log(abs(EF)/P.fmax)]))
    xlabel('Neighborhood size')
    ylabel('log rel particle error')  
    
        
    
    figure(14)
    %% error on mcmc samples
    for j = 1 : P.pdim
        for k = 1 : P.pdim
           subplot(P.pdim,P.pdim,(j-1)*P.pdim+k)
           if(j==k)
               %% 1D
               semilogy(P.XX(:,j),abs(Ftrue-Finterp)/P.fmax,'k*')
               xlim([P.paramspec{j}{3},P.paramspec{j}{4}]);
               xlabel(['log(' P.paramspec{j}{1} ')'])
               ylabel('relative error to f_{max}')
           else
               %% 2D
               scatter3(P.XX(:,k),P.XX(:,j),abs(Ftrue-Finterp)/P.fmax,log(abs(Ftrue-Finterp)),log(abs(Ftrue-Finterp)))
               view(0,90)
               set(gca,'ZScale','log')
               xlim([P.paramspec{k}{3},P.paramspec{k}{4}]);
               ylim([P.paramspec{j}{3},P.paramspec{j}{4}]);
               view(0,90)
               xlabel(['log(' P.paramspec{k}{1} ')'])
               ylabel(['log(' P.paramspec{j}{1} ')'])
           end
        end
    end
    
    %% error on particles
    figure(15)
    title('Error on particles')
    for j = 1 : P.pdim
        for k = 1 : P.pdim
           subplot(P.pdim,P.pdim,(j-1)*P.pdim+k)
           if(j==k)
               %% 1D
               semilogy(P.Xp(:,j),EF/P.fmax,'k*')
               xlim([P.paramspec{j}{3},P.paramspec{j}{4}]);
               xlabel(['log(' P.paramspec{j}{1} ')'])
               ylabel('relative error to f_{max}')
           else
               %% 2D
               scatter3(P.Xp(:,k),P.Xp(:,j),EF/P.fmax,log(EF),log(EF))
               view(0,90)
               set(gca,'ZScale','log')
               xlim([P.paramspec{k}{3},P.paramspec{k}{4}]);
               ylim([P.paramspec{j}{3},P.paramspec{j}{4}]);
               view(0,90)
               xlabel(['log(' P.paramspec{k}{1} ')'])
               ylabel(['log(' P.paramspec{j}{1} ')'])
           end
        end
    end
    

end